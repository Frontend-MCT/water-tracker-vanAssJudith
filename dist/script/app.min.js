
class ProgressTracker {
    constructor(options) {
        this.options = options;

        this.currentProgress = []; //dataAccess[this.options.mode].getProgressOfToday() || [];

        this.timerId = null;

        this.percentageRatio = 100 / this.options.dailyGoal;

        this.percentage = document.querySelector(`.${this.options.domRefs.percentage}`);
        this.timeStampHolder = document.querySelector(`.${this.options.domRefs.timeStampHolder}`);
        this.addButton = document.querySelector(`.${this.options.domRefs.addButton}`);

        this.currentGoalHolders = document.querySelectorAll(`.${this.options.domRefs.currentGoal}`);
        this.currentUnitsHolders = document.querySelectorAll(`.${this.options.domRefs.currentUnits}`);

        this.showUserOptions();
        this.updateProgress();

        // afterUpdate: Æ’ (newPercentage)
        // dailyGoal: 1539
        // mode: "local"
        // units: "ml"
    }

    updateProgress(newLogging = [null, 900]) {
        this.currentProgress.push(newLogging);
        // this.showTimeStamp(newLogging[0]);

        const oldProgress = Number(this.percentage.innerText),
            newProgress = oldProgress + newLogging[1] * this.percentageRatio;
        
        console.log(newProgress);
        
        let v = oldProgress;
        this.timerId = setInterval(() => {
            this.percentage.innerText = v;
            if (v >= newProgress) {
                clearInterval(this.timerId);
            }
            v++;
        }, 16); // 1000ms / 60 frames (/s) = 16ms/fr
    }

    showUserOptions() {
        for (const g of this.currentGoalHolders) {
            g.innerHTML = this.options.dailyGoal;
        }
        for (const u of this.currentUnitsHolders) {
            u.innerHTML = this.options.units;
        } 
    }
}
//module
const uiBinding = (function () {

    //submodule
    const wave = (function () {
        const setup = function () {
            console.log("setup");
        };
        const updateWaveHeight = function () {
            console.log('updateWaveHeight');
        };

        return {
            setup: setup,
            updateWaveHeight: updateWaveHeight
        }
    })();

    //submodule
    const logging = (function () {
        const setup = function () {
            console.log('setup');
        };

        const enableAmountOptions = function () {
            console.log("enable Amount options");
        };

        return {
            setup: setup,
            enableAmountOptions: enableAmountOptions
        }
    })();

    return {
        wave: wave,
        logging: logging
    };
})();

(function() {
	console.log('ðŸ’§', 'https://www.youtube.com/watch?v=ARC1w1WWxGY');

	const options = {
		// De eenheden van je doel
		units: 'ml',
		// De hoeveelheid van het dagelijks doel.
		dailyGoal: 1539,
		// Of je met localStorage of een API wil werk.
		mode: 'local',
		// Een object met classes voor:
		domRefs: {
			// Het huidige percentage.
			percentage: 'js-amount',
			// De tijdstippen
			timeStampHolder: 'js-time-stamps',
			// De 'voeg toe' button
			addButton: 'js-log',
			urrentGoal: 'js-goal',
			currentUnits: 'js-units'
		},
		afterUpdate: function(newPercentage) {
			console.log('It has been updated!');
		}
	};

	document.addEventListener('DOMContentLoaded', () => {
		new ProgressTracker(options);
	});
})();

